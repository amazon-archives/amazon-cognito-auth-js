{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///amazon-cognito-auth.min.js","webpack:///webpack/bootstrap 24e0a06652a1b65884c3","webpack:///./enhance.js","webpack:///./src/CognitoAccessToken.js","webpack:///./src/CognitoIdToken.js","webpack:///./src/CognitoRefreshToken.js","webpack:///./src/CognitoTokenScopes.js","webpack:///./src/CognitoAuthSession.js","webpack:///./src/StorageHelper.js","webpack:///./src/CognitoAuth.js","webpack:///./src/DateHelper.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","defineProperty","value","_src","keys","forEach","enumerable","get","window","crypto","msCrypto","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","configurable","writable","protoProps","staticProps","CognitoAccessToken","AccessToken","jwtToken","payload","decodePayload","accessToken","jwtPayload","split","JSON","parse","atob","exp","username","err","CognitoIdToken","IdToken","idToken","CognitoRefreshToken","RefreshToken","refreshToken","CognitoTokenScopes","TokenScopesArray","tokenScopes","_interopRequireDefault","_CognitoTokenScopes","_CognitoTokenScopes2","_CognitoAccessToken","_CognitoAccessToken2","_CognitoIdToken","_CognitoIdToken2","_CognitoRefreshToken","_CognitoRefreshToken2","CognitoAuthSession","_ref","arguments","undefined","TokenScopes","State","state","now","Math","floor","Date","getExpiration","e","dataMemory","MemoryStorage","StorageHelper","storageWindow","localStorage","setItem","removeItem","exception","_typeof","Symbol","iterator","constructor","_CognitoAuthSession","_CognitoAuthSession2","_StorageHelper","_StorageHelper2","CognitoAuth","data","ClientId","AppWebDomain","RedirectUriSignIn","RedirectUriSignOut","IdentityProvider","UserPoolId","AdvancedSecurityDataCollectionFlag","Storage","Error","getCognitoConstants","PARAMETERERROR","clientId","appWebDomain","Array","isArray","SCOPETYPEERROR","responseType","TOKEN","storage","getStorage","getLastUser","userPoolId","signInUserSession","getCachedSession","setTokenScopes","advancedSecurityDataCollectionFlag","CognitoConstants","DOMAIN_SCHEME","DOMAIN_PATH_SIGNIN","DOMAIN_PATH_TOKEN","DOMAIN_PATH_SIGNOUT","DOMAIN_QUERY_PARAM_REDIRECT_URI","DOMAIN_QUERY_PARAM_SIGNOUT_URI","DOMAIN_QUERY_PARAM_RESPONSE_TYPE","DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER","DOMAIN_QUERY_PARAM_USERCONTEXTDATA","CLIENT_ID","STATE","SCOPE","CODE","POST","QUESTIONMARK","POUNDSIGN","COLONDOUBLESLASH","SLASH","AMPERSAND","EQUALSIGN","SPACE","CONTENTTYPE","CONTENTTYPEVALUE","AUTHORIZATIONCODE","IDTOKEN","ACCESSTOKEN","REFRESHTOKEN","ERROR","ERROR_DESCRIPTION","STRINGTYPE","STATELENGTH","STATEORIGINSTRING","WITHCREDENTIALS","UNDEFINED","SELF","HOSTNAMEREGEX","QUERYPARAMETERREGEX1","QUERYPARAMETERREGEX2","HEADER","Content-Type","lastUserKey","lastAuthUser","getItem","Username","tokenScopesInputSet","Set","cachedScopesSet","getScopes","URL","getFQDNSignIn","isValid","userhandler","onSuccess","compareSets","getRefreshToken","getToken","refreshSession","launchUri","setIdToken","setAccessToken","setRefreshToken","httpRequestResponse","map","indexOf","response","getQueryParameters","getCodeQueryParameter","has","onFailure","getTokenQueryParameter","setState","codeParameter","url","concat","getAppWebDomain","header","body","grant_type","client_id","getClientId","redirect_uri","code","boundOnSuccess","onSuccessExchangeForToken","bind","boundOnFailure","makePOSTRequest","setJwtToken","cacheTokensScopes","keyPrefix","idTokenKey","accessTokenKey","refreshTokenKey","scopeKey","scopesString","scopesArray","sessionData","cachedSession","lastUserName","tokenUserName","getAccessToken","getUsername","getTokenScopes","join","getIdToken","getJwtToken","set1","set2","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","item","return","match","splitMark","str","String","url2","str1","num","Map","set","chars","result","round","random","refresh_token","onSuccessRefreshToken","xhr","createCORSRequest","bodyString","setRequestHeader","substring","send","onreadystatechange","readyState","status","responseText","method","XMLHttpRequest","open","XDomainRequest","jsonData","jsonDataObject","id_token","access_token","tokenScopesString","encodeURIComponent","generateRandomString","identityProviderParam","getSpaceSeperatedScopeString","userContextDataParam","userContextData","getUserContextData","uri","getFQDNSignOut","clearCachedTokensScopes","AmazonCognitoAdvancedSecurityData","_username","_userpoolId","userpoolId","getData","monthNames","weekNames","DateHelper","weekDay","getUTCDay","month","getUTCMonth","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","year","getUTCFullYear","dateNow","_CognitoAuth","_DateHelper"],"mappings":"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","file":"amazon-cognito-auth.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory();\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * Copyright 2017 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n * \n *      http://aws.amazon.com/apache2.0/\n * \n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License. \n */\n\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory();\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _src = __webpack_require__(9);\n\t\n\tObject.keys(_src).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _src[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar enhancements = _interopRequireWildcard(_src);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\t// The version of crypto-browserify included by aws-sdk only\n\t// checks for window.crypto, not window.msCrypto as used by\n\t// IE 11 – so we set it explicitly here\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\t\n\tif (typeof window !== 'undefined' && !window.crypto && window.msCrypto) {\n\t  window.crypto = window.msCrypto;\n\t}\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoAccessToken = function () {\n\t  /**\n\t   * Constructs a new CognitoAccessToken object\n\t   * @param {string=} AccessToken The JWT access token.\n\t   */\n\t  function CognitoAccessToken(AccessToken) {\n\t    _classCallCheck(this, CognitoAccessToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = AccessToken || '';\n\t    this.payload = this.decodePayload();\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoAccessToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\n\t     * Sets new value for access token.\n\t     * @param {string=} accessToken The JWT access token.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setJwtToken',\n\t    value: function setJwtToken(accessToken) {\n\t      this.jwtToken = accessToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the token's expiration (exp member).\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      if (this.jwtToken === null) {\n\t        return undefined;\n\t      }\n\t      var jwtPayload = this.jwtToken.split('.')[1];\n\t      return JSON.parse(atob(jwtPayload)).exp;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the username from payload.\n\t     */\n\t\n\t  }, {\n\t    key: 'getUsername',\n\t    value: function getUsername() {\n\t      if (this.jwtToken === null) {\n\t        return undefined;\n\t      }\n\t      var jwtPayload = this.jwtToken.split('.')[1];\n\t      return JSON.parse(atob(jwtPayload)).username;\n\t    }\n\t\n\t    /**\n\t     * @returns {object} the token's payload.\n\t     */\n\t\n\t  }, {\n\t    key: 'decodePayload',\n\t    value: function decodePayload() {\n\t      var jwtPayload = this.jwtToken.split('.')[1];\n\t      try {\n\t        return JSON.parse(atob(jwtPayload));\n\t      } catch (err) {\n\t        return {};\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return CognitoAccessToken;\n\t}();\n\t\n\texports.default = CognitoAccessToken;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoIdToken = function () {\n\t  /**\n\t   * Constructs a new CognitoIdToken object\n\t   * @param {string=} IdToken The JWT Id token\n\t   */\n\t  function CognitoIdToken(IdToken) {\n\t    _classCallCheck(this, CognitoIdToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = IdToken || '';\n\t    this.payload = this.decodePayload();\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoIdToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\n\t     * Sets new value for id token.\n\t     * @param {string=} idToken The JWT Id token\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setJwtToken',\n\t    value: function setJwtToken(idToken) {\n\t      this.jwtToken = idToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the token's expiration (exp member).\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      if (this.jwtToken === null) {\n\t        return undefined;\n\t      }\n\t      var jwtPayload = this.jwtToken.split('.')[1];\n\t      return JSON.parse(atob(jwtPayload)).exp;\n\t    }\n\t\n\t    /**\n\t     * @returns {object} the token's payload.\n\t     */\n\t\n\t  }, {\n\t    key: 'decodePayload',\n\t    value: function decodePayload() {\n\t      var jwtPayload = this.jwtToken.split('.')[1];\n\t      try {\n\t        return JSON.parse(atob(jwtPayload));\n\t      } catch (err) {\n\t        return {};\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return CognitoIdToken;\n\t}();\n\t\n\texports.default = CognitoIdToken;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoRefreshToken = function () {\n\t  /**\n\t   * Constructs a new CognitoRefreshToken object\n\t   * @param {string=} RefreshToken The JWT refresh token.\n\t   */\n\t  function CognitoRefreshToken(RefreshToken) {\n\t    _classCallCheck(this, CognitoRefreshToken);\n\t\n\t    // Assign object\n\t    this.refreshToken = RefreshToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoRefreshToken, [{\n\t    key: 'getToken',\n\t    value: function getToken() {\n\t      return this.refreshToken;\n\t    }\n\t\n\t    /**\n\t     * Sets new value for refresh token.\n\t     * @param {string=} refreshToken The JWT refresh token.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setToken',\n\t    value: function setToken(refreshToken) {\n\t      this.refreshToken = refreshToken;\n\t    }\n\t  }]);\n\t\n\t  return CognitoRefreshToken;\n\t}();\n\t\n\texports.default = CognitoRefreshToken;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoTokenScopes = function () {\n\t  /**\n\t   * Constructs a new CognitoTokenScopes object\n\t   * @param {array=} TokenScopesArray The token scopes\n\t   */\n\t  function CognitoTokenScopes(TokenScopesArray) {\n\t    _classCallCheck(this, CognitoTokenScopes);\n\t\n\t    // Assign object\n\t    this.tokenScopes = TokenScopesArray || [];\n\t  }\n\t\n\t  /**\n\t   * @returns {Array} the token scopes.\n\t   */\n\t\n\t\n\t  _createClass(CognitoTokenScopes, [{\n\t    key: \"getScopes\",\n\t    value: function getScopes() {\n\t      return this.tokenScopes;\n\t    }\n\t\n\t    /**\n\t     * Sets new value for token scopes.\n\t     * @param {array=} tokenScopes The token scopes\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: \"setTokenScopes\",\n\t    value: function setTokenScopes(tokenScopes) {\n\t      this.tokenScopes = tokenScopes;\n\t    }\n\t  }]);\n\t\n\t  return CognitoTokenScopes;\n\t}();\n\t\n\texports.default = CognitoTokenScopes;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\tmazon Cognito Auth SDK for JavaScript\n\topyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Apache License, Version 2.0 (the \"License\").\n\tou may not use this file except in compliance with the License.\n\tcopy of the License is located at\n\tn\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *         http://aws.amazon.com/apache2.0/\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * or in the \"license\" file accompanying this file.\n\this file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\ticense for the specific language governing permissions\n\tand limitations under the License.\n\tn\t\n\tvar _CognitoTokenScopes = __webpack_require__(4);\n\t\n\tvar _CognitoTokenScopes2 = _interopRequireDefault(_CognitoTokenScopes);\n\t\n\tvar _CognitoAccessToken = __webpack_require__(1);\n\t\n\tvar _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\t\n\tvar _CognitoIdToken = __webpack_require__(2);\n\t\n\tvar _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(3);\n\t\n\tvar _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoAuthSession = function () {\n\t  /**\n\t   * Constructs a new CognitoUserSession object\n\t   * @param {CognitoIdToken} IdToken The session's Id token.\n\t   * @param {CognitoRefreshToken} RefreshToken The session's refresh token.\n\t   * @param {CognitoAccessToken} AccessToken The session's access token.\n\t   * @param {array}  TokenScopes  The session's token scopes.\n\t    * @param {string} State The session's state. \n\t   */\n\t  function CognitoAuthSession() {\n\t    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t        IdToken = _ref.IdToken,\n\t        RefreshToken = _ref.RefreshToken,\n\t        AccessToken = _ref.AccessToken,\n\t        TokenScopes = _ref.TokenScopes,\n\t        State = _ref.State;\n\t\n\t    _classCallCheck(this, CognitoAuthSession);\n\t\n\t    if (IdToken) {\n\t      this.idToken = IdToken;\n\t    } else {\n\t      this.idToken = new _CognitoIdToken2.default();\n\t    }\n\t    if (RefreshToken) {\n\t      this.refreshToken = RefreshToken;\n\t    } else {\n\t      this.refreshToken = new _CognitoRefreshToken2.default();\n\t    }\n\t    if (AccessToken) {\n\t      this.accessToken = AccessToken;\n\t    } else {\n\t      this.accessToken = new _CognitoAccessToken2.default();\n\t    }\n\t    if (TokenScopes) {\n\t      this.tokenScopes = TokenScopes;\n\t    } else {\n\t      this.tokenScopes = new _CognitoTokenScopes2.default();\n\t    }\n\t    if (State) {\n\t      this.state = State;\n\t    } else {\n\t      this.state = null;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * @returns {CognitoIdToken} the session's Id token\n\t   */\n\t\n\t\n\t  _createClass(CognitoAuthSession, [{\n\t    key: 'getIdToken',\n\t    value: function getIdToken() {\n\t      return this.idToken;\n\t    }\n\t\n\t    /**\n\t     * Set a new Id token\n\t     * @param {CognitoIdToken} IdToken The session's Id token.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setIdToken',\n\t    value: function setIdToken(IdToken) {\n\t      this.idToken = IdToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoRefreshToken} the session's refresh token\n\t     */\n\t\n\t  }, {\n\t    key: 'getRefreshToken',\n\t    value: function getRefreshToken() {\n\t      return this.refreshToken;\n\t    }\n\t\n\t    /**\n\t     * Set a new Refresh token\n\t     * @param {CognitoRefreshToken} RefreshToken The session's refresh token.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setRefreshToken',\n\t    value: function setRefreshToken(RefreshToken) {\n\t      this.refreshToken = RefreshToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoAccessToken} the session's access token\n\t     */\n\t\n\t  }, {\n\t    key: 'getAccessToken',\n\t    value: function getAccessToken() {\n\t      return this.accessToken;\n\t    }\n\t\n\t    /**\n\t     * Set a new Access token\n\t     * @param {CognitoAccessToken} AccessToken The session's access token.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setAccessToken',\n\t    value: function setAccessToken(AccessToken) {\n\t      this.accessToken = AccessToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoTokenScopes} the session's token scopes\n\t     */\n\t\n\t  }, {\n\t    key: 'getTokenScopes',\n\t    value: function getTokenScopes() {\n\t      return this.tokenScopes;\n\t    }\n\t\n\t    /**\n\t     * Set new token scopes\n\t     * @param {array}  tokenScopes  The session's token scopes.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setTokenScopes',\n\t    value: function setTokenScopes(tokenScopes) {\n\t      this.tokenScopes = tokenScopes;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the session's state\n\t     */\n\t\n\t  }, {\n\t    key: 'getState',\n\t    value: function getState() {\n\t      return this.state;\n\t    }\n\t\n\t    /**\n\t     * Set new state\n\t     * @param {string}  state  The session's state.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setState',\n\t    value: function setState(State) {\n\t      this.state = State;\n\t    }\n\t\n\t    /**\n\t     * Checks to see if the session is still valid based on session expiry information found\n\t     * in Access and Id Tokens and the current time\n\t     * @returns {boolean} if the session is still valid\n\t     */\n\t\n\t  }, {\n\t    key: 'isValid',\n\t    value: function isValid() {\n\t      var now = Math.floor(new Date() / 1000);\n\t      try {\n\t        if (this.accessToken != null) {\n\t          return now < this.accessToken.getExpiration();\n\t        }\n\t        if (this.idToken != null) {\n\t          return now < this.idToken.getExpiration();\n\t        }\n\t        return false;\n\t      } catch (e) {\n\t        return false;\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return CognitoAuthSession;\n\t}();\n\t\n\texports.default = CognitoAuthSession;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\tvar dataMemory = {};\n\t\n\t/** @class */\n\t\n\tvar MemoryStorage = function () {\n\t  function MemoryStorage() {\n\t    _classCallCheck(this, MemoryStorage);\n\t  }\n\t\n\t  _createClass(MemoryStorage, null, [{\n\t    key: 'setItem',\n\t\n\t\n\t    /**\n\t     * This is used to set a specific item in storage\n\t     * @param {string} key - the key for the item\n\t     * @param {object} value - the value\n\t     * @returns {string} value that was set\n\t     */\n\t    value: function setItem(key, value) {\n\t      dataMemory[key] = value;\n\t      return dataMemory[key];\n\t    }\n\t\n\t    /**\n\t     * This is used to get a specific key from storage\n\t     * @param {string} key - the key for the item\n\t     * This is used to clear the storage\n\t     * @returns {string} the data item\n\t     */\n\t\n\t  }, {\n\t    key: 'getItem',\n\t    value: function getItem(key) {\n\t      return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to remove an item from storage\n\t     * @param {string} key - the key being set\n\t     * @returns {string} value - value that was deleted\n\t     */\n\t\n\t  }, {\n\t    key: 'removeItem',\n\t    value: function removeItem(key) {\n\t      return delete dataMemory[key];\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the storage\n\t     * @returns {string} nothing\n\t     */\n\t\n\t  }, {\n\t    key: 'clear',\n\t    value: function clear() {\n\t      dataMemory = {};\n\t      return dataMemory;\n\t    }\n\t  }]);\n\t\n\t  return MemoryStorage;\n\t}();\n\t\n\t/** @class */\n\t\n\t\n\tvar StorageHelper = function () {\n\t\n\t  /**\n\t   * This is used to get a storage object\n\t   * @returns {object} the storage\n\t   */\n\t  function StorageHelper() {\n\t    _classCallCheck(this, StorageHelper);\n\t\n\t    try {\n\t      this.storageWindow = window.localStorage;\n\t      this.storageWindow.setItem('aws.cognito.test-ls', 1);\n\t      this.storageWindow.removeItem('aws.cognito.test-ls');\n\t    } catch (exception) {\n\t      this.storageWindow = MemoryStorage;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * This is used to return the storage\n\t   * @returns {object} the storage\n\t   */\n\t\n\t\n\t  _createClass(StorageHelper, [{\n\t    key: 'getStorage',\n\t    value: function getStorage() {\n\t      return this.storageWindow;\n\t    }\n\t  }]);\n\t\n\t  return StorageHelper;\n\t}();\n\t\n\texports.default = StorageHelper;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * Amazon Cognito Auth SDK for JavaScript\n\topyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *\n\ticensed under the Apache License, Version 2.0 (the \"License\").\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * You may not use this file except in compliance with the License.\n\tcopy of the License is located at\n\tn\thttp://aws.amazon.com/apache2.0/\n\tn\tor in the \"license\" file accompanying this file.\n\this file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\teither express or implied. See the\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       * License for the specific language governing permissions\n\tand limitations under the License.\n\tn\t\n\tvar _CognitoTokenScopes = __webpack_require__(4);\n\t\n\tvar _CognitoTokenScopes2 = _interopRequireDefault(_CognitoTokenScopes);\n\t\n\tvar _CognitoAccessToken = __webpack_require__(1);\n\t\n\tvar _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\t\n\tvar _CognitoIdToken = __webpack_require__(2);\n\t\n\tvar _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(3);\n\t\n\tvar _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\t\n\tvar _CognitoAuthSession = __webpack_require__(5);\n\t\n\tvar _CognitoAuthSession2 = _interopRequireDefault(_CognitoAuthSession);\n\t\n\tvar _StorageHelper = __webpack_require__(6);\n\t\n\tvar _StorageHelper2 = _interopRequireDefault(_StorageHelper);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoAuth = function () {\n\t  /**\n\t   * Constructs a new CognitoAuth object\n\t   * @param {object} data Creation options\n\t   * @param {string} data.ClientId Required: User pool application client id.\n\t   * @param {string} data.AppWebDomain Required: The application/user-pools Cognito web hostname,\n\t   *                     this is set at the Cognito console.\n\t   * @param {array} data.TokenScopesArray Optional: The token scopes\n\t   * @param {string} data.RedirectUriSignIn Required: The redirect Uri,\n\t   * which will be launched after authentication as signed in.\n\t   * @param {string} data.RedirectUriSignOut Required:\n\t   * The redirect Uri, which will be launched when signed out.\n\t   * @param {string} data.IdentityProvider Optional: Pre-selected identity provider (this allows to\n\t   * automatically trigger social provider authentication flow).\n\t   * @param {string} data.UserPoolId Optional: UserPoolId for the configured cognito userPool.\n\t   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional: boolean flag indicating if the\n\t   *        data collection is enabled to support cognito advanced security features. By default, this\n\t   *        flag is set to true.\n\t   * @param {nodeCallback<CognitoAuthSession>} Optional: userhandler Called on success or error.\n\t   */\n\t  function CognitoAuth(data) {\n\t    _classCallCheck(this, CognitoAuth);\n\t\n\t    var _ref = data || {},\n\t        ClientId = _ref.ClientId,\n\t        AppWebDomain = _ref.AppWebDomain,\n\t        TokenScopesArray = _ref.TokenScopesArray,\n\t        RedirectUriSignIn = _ref.RedirectUriSignIn,\n\t        RedirectUriSignOut = _ref.RedirectUriSignOut,\n\t        IdentityProvider = _ref.IdentityProvider,\n\t        UserPoolId = _ref.UserPoolId,\n\t        AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag,\n\t        Storage = _ref.Storage;\n\t\n\t    if (data == null || !ClientId || !AppWebDomain || !RedirectUriSignIn || !RedirectUriSignOut) {\n\t      throw new Error(this.getCognitoConstants().PARAMETERERROR);\n\t    }\n\t\n\t    this.clientId = ClientId;\n\t    this.appWebDomain = AppWebDomain;\n\t    this.TokenScopesArray = TokenScopesArray || [];\n\t    if (!Array.isArray(TokenScopesArray)) {\n\t      throw new Error(this.getCognitoConstants().SCOPETYPEERROR);\n\t    }\n\t    var tokenScopes = new _CognitoTokenScopes2.default(this.TokenScopesArray);\n\t    this.RedirectUriSignIn = RedirectUriSignIn;\n\t    this.RedirectUriSignOut = RedirectUriSignOut;\n\t    this.IdentityProvider = IdentityProvider;\n\t    this.responseType = this.getCognitoConstants().TOKEN;\n\t    this.storage = Storage || new _StorageHelper2.default().getStorage();\n\t    this.username = this.getLastUser();\n\t    this.userPoolId = UserPoolId;\n\t    this.signInUserSession = this.getCachedSession();\n\t    +this.signInUserSession.setTokenScopes(tokenScopes);\n\t\n\t    /**\n\t     * By default, AdvancedSecurityDataCollectionFlag is set to true, if no input value is provided.\n\t     */\n\t    this.advancedSecurityDataCollectionFlag = true;\n\t    if (AdvancedSecurityDataCollectionFlag) {\n\t      this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * @returns {JSON} the constants\n\t   */\n\t\n\t\n\t  _createClass(CognitoAuth, [{\n\t    key: 'getCognitoConstants',\n\t    value: function getCognitoConstants() {\n\t      var CognitoConstants = {\n\t        DOMAIN_SCHEME: 'https',\n\t        DOMAIN_PATH_SIGNIN: 'oauth2/authorize',\n\t        DOMAIN_PATH_TOKEN: 'oauth2/token',\n\t        DOMAIN_PATH_SIGNOUT: 'logout',\n\t        DOMAIN_QUERY_PARAM_REDIRECT_URI: 'redirect_uri',\n\t        DOMAIN_QUERY_PARAM_SIGNOUT_URI: 'logout_uri',\n\t        DOMAIN_QUERY_PARAM_RESPONSE_TYPE: 'response_type',\n\t        DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER: 'identity_provider',\n\t        DOMAIN_QUERY_PARAM_USERCONTEXTDATA: 'userContextData',\n\t        CLIENT_ID: 'client_id',\n\t        STATE: 'state',\n\t        SCOPE: 'scope',\n\t        TOKEN: 'token',\n\t        CODE: 'code',\n\t        POST: 'POST',\n\t        PARAMETERERROR: 'The parameters: App client Id, App web domain' + ', the redirect URL when you are signed in and the ' + 'redirect URL when you are signed out are required.',\n\t        SCOPETYPEERROR: 'Scopes have to be array type. ',\n\t        QUESTIONMARK: '?',\n\t        POUNDSIGN: '#',\n\t        COLONDOUBLESLASH: '://',\n\t        SLASH: '/',\n\t        AMPERSAND: '&',\n\t        EQUALSIGN: '=',\n\t        SPACE: ' ',\n\t        CONTENTTYPE: 'Content-Type',\n\t        CONTENTTYPEVALUE: 'application/x-www-form-urlencoded',\n\t        AUTHORIZATIONCODE: 'authorization_code',\n\t        IDTOKEN: 'id_token',\n\t        ACCESSTOKEN: 'access_token',\n\t        REFRESHTOKEN: 'refresh_token',\n\t        ERROR: 'error',\n\t        ERROR_DESCRIPTION: 'error_description',\n\t        STRINGTYPE: 'string',\n\t        STATELENGTH: 32,\n\t        STATEORIGINSTRING: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\t        WITHCREDENTIALS: 'withCredentials',\n\t        UNDEFINED: 'undefined',\n\t        SELF: '_self',\n\t        HOSTNAMEREGEX: /:\\/\\/([0-9]?\\.)?(.[^/:]+)/i,\n\t        QUERYPARAMETERREGEX1: /#(.+)/,\n\t        QUERYPARAMETERREGEX2: /=(.+)/,\n\t        HEADER: { 'Content-Type': 'application/x-www-form-urlencoded' }\n\t      };\n\t      return CognitoConstants;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the client id\n\t     */\n\t\n\t  }, {\n\t    key: 'getClientId',\n\t    value: function getClientId() {\n\t      return this.clientId;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the app web domain\n\t     */\n\t\n\t  }, {\n\t    key: 'getAppWebDomain',\n\t    value: function getAppWebDomain() {\n\t      return this.appWebDomain;\n\t    }\n\t\n\t    /**\n\t     * method for getting the current user of the application from the local storage\n\t     *\n\t     * @returns {CognitoAuth} the user retrieved from storage\n\t     */\n\t\n\t  }, {\n\t    key: 'getCurrentUser',\n\t    value: function getCurrentUser() {\n\t      var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n\t\n\t      var lastAuthUser = this.storage.getItem(lastUserKey);\n\t      return lastAuthUser;\n\t    }\n\t\n\t    /**\n\t     * @param {string} Username the user's name\n\t     * method for setting the current user's name\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setUser',\n\t    value: function setUser(Username) {\n\t      this.username = Username;\n\t    }\n\t\n\t    /**\n\t     * sets response type to 'code'\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'useCodeGrantFlow',\n\t    value: function useCodeGrantFlow() {\n\t      this.responseType = this.getCognitoConstants().CODE;\n\t    }\n\t\n\t    /**\n\t     * sets response type to 'token'\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'useImplicitFlow',\n\t    value: function useImplicitFlow() {\n\t      this.responseType = this.getCognitoConstants().TOKEN;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoAuthSession} the current session for this user\n\t     */\n\t\n\t  }, {\n\t    key: 'getSignInUserSession',\n\t    value: function getSignInUserSession() {\n\t      return this.signInUserSession;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the user's username\n\t     */\n\t\n\t  }, {\n\t    key: 'getUsername',\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\n\t     * @param {string} Username the user's username\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setUsername',\n\t    value: function setUsername(Username) {\n\t      this.username = Username;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the user's state\n\t     */\n\t\n\t  }, {\n\t    key: 'getState',\n\t    value: function getState() {\n\t      return this.state;\n\t    }\n\t\n\t    /**\n\t     * @param {string} State the user's state\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setState',\n\t    value: function setState(State) {\n\t      this.state = State;\n\t    }\n\t\n\t    /**\n\t     * This is used to get a session, either from the session object\n\t     * or from the local storage, or by using a refresh token\n\t     * @param {string} RedirectUriSignIn Required: The redirect Uri,\n\t     * which will be launched after authentication.\n\t     * @param {array} TokenScopesArray Required: The token scopes, it is an\n\t     * array of strings specifying all scopes for the tokens.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getSession',\n\t    value: function getSession() {\n\t      var tokenScopesInputSet = new Set(this.TokenScopesArray);\n\t      var cachedScopesSet = new Set(this.signInUserSession.tokenScopes.getScopes());\n\t      var URL = this.getFQDNSignIn();\n\t      if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n\t        return this.userhandler.onSuccess(this.signInUserSession);\n\t      }\n\t      this.signInUserSession = this.getCachedSession();\n\t      // compare scopes\n\t      if (!this.compareSets(tokenScopesInputSet, cachedScopesSet)) {\n\t        var tokenScopes = new _CognitoTokenScopes2.default(this.TokenScopesArray);\n\t        var idToken = new _CognitoIdToken2.default();\n\t        var accessToken = new _CognitoAccessToken2.default();\n\t        var refreshToken = new _CognitoRefreshToken2.default();\n\t        this.signInUserSession.setTokenScopes(tokenScopes);\n\t        this.signInUserSession.setIdToken(idToken);\n\t        this.signInUserSession.setAccessToken(accessToken);\n\t        this.signInUserSession.setRefreshToken(refreshToken);\n\t        this.launchUri(URL);\n\t      } else if (this.signInUserSession.isValid()) {\n\t        return this.userhandler.onSuccess(this.signInUserSession);\n\t      } else if (!this.signInUserSession.getRefreshToken() || !this.signInUserSession.getRefreshToken().getToken()) {\n\t        this.launchUri(URL);\n\t      } else {\n\t        this.refreshSession(this.signInUserSession.getRefreshToken().getToken());\n\t      }\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * @param {string} httpRequestResponse the http request response\n\t     * @returns {void}\n\t     * Parse the http request response and proceed according to different response types.\n\t     */\n\t\n\t  }, {\n\t    key: 'parseCognitoWebResponse',\n\t    value: function parseCognitoWebResponse(httpRequestResponse) {\n\t      var map = void 0;\n\t      if (httpRequestResponse.indexOf(this.getCognitoConstants().QUESTIONMARK) > -1) {\n\t        // for code type\n\t        // this is to avoid a bug exists when sign in with Google or facebook\n\t        // Sometimes the code will contain a poundsign in the end which breaks the parsing\n\t        var response = httpRequestResponse.split(this.getCognitoConstants().POUNDSIGN)[0];\n\t        map = this.getQueryParameters(response, this.getCognitoConstants().QUESTIONMARK);\n\t        this.getCodeQueryParameter(map);\n\t      } else if (httpRequestResponse.indexOf(this.getCognitoConstants().POUNDSIGN) > -1) {\n\t        // for token type\n\t        map = this.getQueryParameters(httpRequestResponse, this.getCognitoConstants().QUERYPARAMETERREGEX1);\n\t        if (map.has(this.getCognitoConstants().ERROR)) {\n\t          return this.userhandler.onFailure(map.get(this.getCognitoConstants().ERROR_DESCRIPTION));\n\t        }\n\t        // To use the map to get tokens\n\t        this.getTokenQueryParameter(map);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * @param {map} Query parameter map \n\t     * @returns {void}\n\t     * Get the query parameter map and proceed according to code response type.\n\t     */\n\t\n\t  }, {\n\t    key: 'getCodeQueryParameter',\n\t    value: function getCodeQueryParameter(map) {\n\t      var state = null;\n\t      if (map.has(this.getCognitoConstants().STATE)) {\n\t        this.signInUserSession.setState(map.get(this.getCognitoConstants().STATE));\n\t      } else {\n\t        this.signInUserSession.setState(state);\n\t      }\n\t\n\t      if (map.has(this.getCognitoConstants().CODE)) {\n\t        // if the response contains code\n\t        // To parse the response and get the code value.\n\t        var codeParameter = map.get(this.getCognitoConstants().CODE);\n\t        var url = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_TOKEN);\n\t        var header = this.getCognitoConstants().HEADER;\n\t        var body = { grant_type: this.getCognitoConstants().AUTHORIZATIONCODE,\n\t          client_id: this.getClientId(),\n\t          redirect_uri: this.RedirectUriSignIn,\n\t          code: codeParameter };\n\t        var boundOnSuccess = this.onSuccessExchangeForToken.bind(this);\n\t        var boundOnFailure = this.onFailure.bind(this);\n\t        this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Get the query parameter map and proceed according to token response type.\n\t     * @param {map} Query parameter map \n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getTokenQueryParameter',\n\t    value: function getTokenQueryParameter(map) {\n\t      var idToken = new _CognitoIdToken2.default();\n\t      var accessToken = new _CognitoAccessToken2.default();\n\t      var refreshToken = new _CognitoRefreshToken2.default();\n\t      var state = null;\n\t      if (map.has(this.getCognitoConstants().IDTOKEN)) {\n\t        idToken.setJwtToken(map.get(this.getCognitoConstants().IDTOKEN));\n\t        this.signInUserSession.setIdToken(idToken);\n\t      } else {\n\t        this.signInUserSession.setIdToken(idToken);\n\t      }\n\t      if (map.has(this.getCognitoConstants().ACCESSTOKEN)) {\n\t        accessToken.setJwtToken(map.get(this.getCognitoConstants().ACCESSTOKEN));\n\t        this.signInUserSession.setAccessToken(accessToken);\n\t      } else {\n\t        this.signInUserSession.setAccessToken(accessToken);\n\t      }\n\t      if (map.has(this.getCognitoConstants().STATE)) {\n\t        this.signInUserSession.setState(map.get(this.getCognitoConstants().STATE));\n\t      } else {\n\t        this.signInUserSession.setState(state);\n\t      }\n\t      this.cacheTokensScopes();\n\t      this.userhandler.onSuccess(this.signInUserSession);\n\t    }\n\t\n\t    /**\n\t     * Get cached tokens and scopes and return a new session using all the cached data.\n\t     * @returns {CognitoAuthSession} the auth session\n\t     */\n\t\n\t  }, {\n\t    key: 'getCachedSession',\n\t    value: function getCachedSession() {\n\t      if (!this.username) {\n\t        return new _CognitoAuthSession2.default();\n\t      }\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId() + '.' + this.username;\n\t      var idTokenKey = keyPrefix + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.refreshToken';\n\t      var scopeKey = keyPrefix + '.tokenScopesString';\n\t\n\t      var scopesString = this.storage.getItem(scopeKey);\n\t      var scopesArray = [];\n\t      if (scopesString) {\n\t        scopesArray = scopesString.split(' ');\n\t      }\n\t      var tokenScopes = new _CognitoTokenScopes2.default(scopesArray);\n\t      var idToken = new _CognitoIdToken2.default(this.storage.getItem(idTokenKey));\n\t      var accessToken = new _CognitoAccessToken2.default(this.storage.getItem(accessTokenKey));\n\t      var refreshToken = new _CognitoRefreshToken2.default(this.storage.getItem(refreshTokenKey));\n\t\n\t      var sessionData = {\n\t        IdToken: idToken,\n\t        AccessToken: accessToken,\n\t        RefreshToken: refreshToken,\n\t        TokenScopes: tokenScopes\n\t      };\n\t      var cachedSession = new _CognitoAuthSession2.default(sessionData);\n\t      return cachedSession;\n\t    }\n\t\n\t    /**\n\t     * This is used to get last signed in user from local storage\n\t     * @returns {string} the last user name\n\t     */\n\t\n\t  }, {\n\t    key: 'getLastUser',\n\t    value: function getLastUser() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t      var lastUserName = this.storage.getItem(lastUserKey);\n\t      if (lastUserName) {\n\t        return lastUserName;\n\t      }\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to save the session tokens and scopes to local storage\n\t     * Input parameter is a set of strings.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheTokensScopes',\n\t    value: function cacheTokensScopes() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n\t      var tokenUserName = this.signInUserSession.getAccessToken().getUsername();\n\t      this.username = tokenUserName;\n\t      var idTokenKey = keyPrefix + '.' + tokenUserName + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + tokenUserName + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + tokenUserName + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t      var scopeKey = keyPrefix + '.' + tokenUserName + '.tokenScopesString';\n\t      var scopesArray = this.signInUserSession.getTokenScopes().getScopes();\n\t      var scopesString = scopesArray.join(' ');\n\t      this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n\t      this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n\t      this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n\t      this.storage.setItem(lastUserKey, tokenUserName);\n\t      this.storage.setItem(scopeKey, scopesString);\n\t    }\n\t\n\t    /**\n\t     * Compare two sets if they are identical.\n\t     * @param {set} set1 one set\n\t     * @param {set} set2 the other set\n\t     * @returns {boolean} boolean value is true if two sets are identical\n\t     */\n\t\n\t  }, {\n\t    key: 'compareSets',\n\t    value: function compareSets(set1, set2) {\n\t      if (set1.size !== set2.size) {\n\t        return false;\n\t      }\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = set1[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          var item = _step.value;\n\t\n\t          if (!set2.has(item)) {\n\t            return false;\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      return true;\n\t    }\n\t\n\t    /**\n\t     * @param {string} url the url string\n\t     * Get the hostname from url.\n\t     * @returns {string} hostname string\n\t     */\n\t\n\t  }, {\n\t    key: 'getHostName',\n\t    value: function getHostName(url) {\n\t      var match = url.match(this.getCognitoConstants().HOSTNAMEREGEX);\n\t      if (match != null && match.length > 2 && _typeof(match[2]) === this.getCognitoConstants().STRINGTYPE && match[2].length > 0) {\n\t        return match[2];\n\t      }\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * Get http query parameters and return them as a map.\n\t     * @param {string} url the url string\n\t     * @param {string} splitMark query parameters split mark (prefix)\n\t     * @returns {map} map\n\t     */\n\t\n\t  }, {\n\t    key: 'getQueryParameters',\n\t    value: function getQueryParameters(url, splitMark) {\n\t      var str = String(url).split(splitMark);\n\t      var url2 = str[1];\n\t      var str1 = String(url2).split(this.getCognitoConstants().AMPERSAND);\n\t      var num = str1.length;\n\t      var map = new Map();\n\t      var i = void 0;\n\t      for (i = 0; i < num; i++) {\n\t        str1[i] = String(str1[i]).split(this.getCognitoConstants().QUERYPARAMETERREGEX2);\n\t        map.set(str1[i][0], str1[i][1]);\n\t      }\n\t      return map;\n\t    }\n\t\n\t    /**\n\t     * helper function to generate a random string\n\t     * @param {int} length the length of string\n\t     * @param {string} chars a original string\n\t     * @returns {string} a random value.\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomString',\n\t    value: function generateRandomString(length, chars) {\n\t      var result = '';\n\t      var i = length;\n\t      for (; i > 0; --i) {\n\t        result += chars[Math.round(Math.random() * (chars.length - 1))];\n\t      }return result;\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the session tokens and scopes from local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedTokensScopes',\n\t    value: function clearCachedTokensScopes() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t      var scopeKey = keyPrefix + '.' + this.username + '.tokenScopesString';\n\t\n\t      this.storage.removeItem(idTokenKey);\n\t      this.storage.removeItem(accessTokenKey);\n\t      this.storage.removeItem(refreshTokenKey);\n\t      this.storage.removeItem(lastUserKey);\n\t      this.storage.removeItem(scopeKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to build a user session from tokens retrieved in the authentication result\n\t     * @param {object} refreshToken authResult Successful auth response from server.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'refreshSession',\n\t    value: function refreshSession(refreshToken) {\n\t      // https POST call for refreshing token\n\t      var url = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_TOKEN);\n\t      var header = this.getCognitoConstants().HEADER;\n\t      var body = { grant_type: this.getCognitoConstants().REFRESHTOKEN,\n\t        client_id: this.getClientId(),\n\t        redirect_uri: this.RedirectUriSignIn,\n\t        refresh_token: refreshToken };\n\t      var boundOnSuccess = this.onSuccessRefreshToken.bind(this);\n\t      var boundOnFailure = this.onFailure.bind(this);\n\t      this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n\t    }\n\t\n\t    /**\n\t     * Make the http POST request.\n\t     * @param {JSON} header header JSON object\n\t     * @param {JSON} body body JSON object\n\t     * @param {string} url string\n\t     * @param {function} onSuccess callback\n\t     * @param {function} onFailure callback\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'makePOSTRequest',\n\t    value: function makePOSTRequest(header, body, url, onSuccess, onFailure) {\n\t      // This is a sample server that supports CORS.\n\t      var xhr = this.createCORSRequest(this.getCognitoConstants().POST, url);\n\t      var bodyString = '';\n\t      if (!xhr) {\n\t        return;\n\t      }\n\t      // set header\n\t      for (var key in header) {\n\t        xhr.setRequestHeader(key, header[key]);\n\t      }\n\t      for (var _key in body) {\n\t        bodyString = bodyString.concat(_key, this.getCognitoConstants().EQUALSIGN, body[_key], this.getCognitoConstants().AMPERSAND);\n\t      }\n\t      bodyString = bodyString.substring(0, bodyString.length - 1);\n\t      xhr.send(bodyString);\n\t      xhr.onreadystatechange = function addressState() {\n\t        if (xhr.readyState === 4) {\n\t          if (xhr.status === 200) {\n\t            onSuccess(xhr.responseText);\n\t          } else {\n\t            onFailure(xhr.responseText);\n\t          }\n\t        }\n\t      };\n\t    }\n\t\n\t    /**\n\t     * Create the XHR object\n\t     * @param {string} method which method to call\n\t     * @param {string} url the url string\n\t     * @returns {object} xhr\n\t     */\n\t\n\t  }, {\n\t    key: 'createCORSRequest',\n\t    value: function createCORSRequest(method, url) {\n\t      var xhr = new XMLHttpRequest();\n\t      xhr.open(method, url, true);\n\t      if (this.getCognitoConstants().WITHCREDENTIALS in xhr) {\n\t        // XHR for Chrome/Firefox/Opera/Safari.\n\t        xhr.open(method, url, true);\n\t      } else if ((typeof XDomainRequest === 'undefined' ? 'undefined' : _typeof(XDomainRequest)) !== this.getCognitoConstants().UNDEFINED) {\n\t        // XDomainRequest for IE.\n\t        xhr = new XDomainRequest();\n\t        xhr.open(method, url);\n\t      } else {\n\t        // CORS not supported.\n\t        xhr = null;\n\t      }\n\t      return xhr;\n\t    }\n\t\n\t    /**\n\t     * The http POST request onFailure callback.\n\t     * @param {object} err the error object\n\t     * @returns {function} onFailure\n\t     */\n\t\n\t  }, {\n\t    key: 'onFailure',\n\t    value: function onFailure(err) {\n\t      this.userhandler.onFailure(err);\n\t    }\n\t\n\t    /**\n\t     * The http POST request onSuccess callback when refreshing tokens.\n\t     * @param {JSON} jsonData tokens\n\t     */\n\t\n\t  }, {\n\t    key: 'onSuccessRefreshToken',\n\t    value: function onSuccessRefreshToken(jsonData) {\n\t      var jsonDataObject = JSON.parse(jsonData);\n\t      if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ERROR)) {\n\t        var URL = this.getFQDNSignIn();\n\t        this.launchUri(URL);\n\t      } else {\n\t        if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().IDTOKEN)) {\n\t          this.signInUserSession.setIdToken(new _CognitoIdToken2.default(jsonDataObject.id_token));\n\t        }\n\t        if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ACCESSTOKEN)) {\n\t          this.signInUserSession.setAccessToken(new _CognitoAccessToken2.default(jsonDataObject.access_token));\n\t        }\n\t        this.cacheTokensScopes();\n\t        this.userhandler.onSuccess(this.signInUserSession);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * The http POST request onSuccess callback when exchanging code for tokens.\n\t     * @param {JSON} jsonData tokens\n\t     */\n\t\n\t  }, {\n\t    key: 'onSuccessExchangeForToken',\n\t    value: function onSuccessExchangeForToken(jsonData) {\n\t      var jsonDataObject = JSON.parse(jsonData);\n\t      var refreshToken = new _CognitoRefreshToken2.default();\n\t      var accessToken = new _CognitoAccessToken2.default();\n\t      var idToken = new _CognitoIdToken2.default();\n\t      var state = null;\n\t      if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ERROR)) {\n\t        return this.userhandler.onFailure(jsonData);\n\t      }\n\t      if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().IDTOKEN)) {\n\t        this.signInUserSession.setIdToken(new _CognitoIdToken2.default(jsonDataObject.id_token));\n\t      } else {\n\t        this.signInUserSession.setIdToken(idToken);\n\t      }\n\t      if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ACCESSTOKEN)) {\n\t        this.signInUserSession.setAccessToken(new _CognitoAccessToken2.default(jsonDataObject.access_token));\n\t      } else {\n\t        this.signInUserSession.setAccessToken(accessToken);\n\t      }\n\t      if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().REFRESHTOKEN)) {\n\t        this.signInUserSession.setRefreshToken(new _CognitoRefreshToken2.default(jsonDataObject.refresh_token));\n\t      } else {\n\t        this.signInUserSession.setRefreshToken(refreshToken);\n\t      }\n\t      this.cacheTokensScopes();\n\t      this.userhandler.onSuccess(this.signInUserSession);\n\t    }\n\t\n\t    /**\n\t     * Launch Cognito Auth UI page.\n\t     * @param {string} URL the url to launch\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'launchUri',\n\t    value: function launchUri(URL) {\n\t      window.open(URL, this.getCognitoConstants().SELF);\n\t    }\n\t\n\t    /**\n\t     * @returns {string} scopes string\n\t     */\n\t\n\t  }, {\n\t    key: 'getSpaceSeperatedScopeString',\n\t    value: function getSpaceSeperatedScopeString() {\n\t      var tokenScopesString = this.signInUserSession.getTokenScopes().getScopes();\n\t      tokenScopesString = tokenScopesString.join(this.getCognitoConstants().SPACE);\n\t      return encodeURIComponent(tokenScopesString);\n\t    }\n\t\n\t    /**\n\t     * Create the FQDN(fully qualified domain name) for authorization endpoint.\n\t     * @returns {string} url\n\t     */\n\t\n\t  }, {\n\t    key: 'getFQDNSignIn',\n\t    value: function getFQDNSignIn() {\n\t      if (this.state == null) {\n\t        this.state = this.generateRandomString(this.getCognitoConstants().STATELENGTH, this.getCognitoConstants().STATEORIGINSTRING);\n\t      }\n\t\n\t      var identityProviderParam = this.IdentityProvider ? this.getCognitoConstants().AMPERSAND.concat(this.getCognitoConstants().DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER, this.getCognitoConstants().EQUALSIGN, this.IdentityProvider) : '';\n\t      var tokenScopesString = this.getSpaceSeperatedScopeString();\n\t\n\t      var userContextDataParam = '';\n\t      var userContextData = this.getUserContextData();\n\t      if (userContextData) {\n\t        userContextDataParam = this.getCognitoConstants().AMPERSAND + this.getCognitoConstants().DOMAIN_QUERY_PARAM_USERCONTEXTDATA + this.getCognitoConstants().EQUALSIGN + this.getUserContextData();\n\t      }\n\t\n\t      // Build the complete web domain to launch the login screen\n\t      var uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNIN, this.getCognitoConstants().QUESTIONMARK, this.getCognitoConstants().DOMAIN_QUERY_PARAM_REDIRECT_URI, this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignIn), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().DOMAIN_QUERY_PARAM_RESPONSE_TYPE, this.getCognitoConstants().EQUALSIGN, this.responseType, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID, this.getCognitoConstants().EQUALSIGN, this.getClientId(), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().STATE, this.getCognitoConstants().EQUALSIGN, this.state, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().SCOPE, this.getCognitoConstants().EQUALSIGN, tokenScopesString, identityProviderParam, userContextDataParam);\n\t\n\t      return uri;\n\t    }\n\t\n\t    /**\n\t     * Sign out the user.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'signOut',\n\t    value: function signOut() {\n\t      var URL = this.getFQDNSignOut();\n\t      this.signInUserSession = null;\n\t      this.clearCachedTokensScopes();\n\t      this.launchUri(URL);\n\t    }\n\t\n\t    /**\n\t     * Create the FQDN(fully qualified domain name) for signout endpoint.\n\t     * @returns {string} url\n\t     */\n\t\n\t  }, {\n\t    key: 'getFQDNSignOut',\n\t    value: function getFQDNSignOut() {\n\t      var uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNOUT, this.getCognitoConstants().QUESTIONMARK, this.getCognitoConstants().DOMAIN_QUERY_PARAM_SIGNOUT_URI, this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignOut), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID, this.getCognitoConstants().EQUALSIGN, this.getClientId());\n\t      return uri;\n\t    }\n\t\n\t    /**\n\t     * This method returns the encoded data string used for cognito advanced security feature.\n\t     * This would be generated only when developer has included the JS used for collecting the\n\t     * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n\t     * features\n\t     **/\n\t\n\t  }, {\n\t    key: 'getUserContextData',\n\t    value: function getUserContextData() {\n\t      if (typeof AmazonCognitoAdvancedSecurityData === \"undefined\") {\n\t        return;\n\t      }\n\t\n\t      var _username = \"\";\n\t      if (this.username) {\n\t        _username = this.username;\n\t      }\n\t\n\t      var _userpoolId = \"\";\n\t      if (this.userpoolId) {\n\t        _userpoolId = this.userpoolId;\n\t      }\n\t\n\t      if (this.advancedSecurityDataCollectionFlag) {\n\t        return AmazonCognitoAdvancedSecurityData.getData(_username, _userpoolId, this.clientId);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Helper method to let the user know if he has either a valid cached session \n\t     * or a valid authenticated session from the app integration callback.\n\t     * @returns {boolean} userSignedIn \n\t     */\n\t\n\t  }, {\n\t    key: 'isUserSignedIn',\n\t    value: function isUserSignedIn() {\n\t      return this.signInUserSession != null && this.signInUserSession.isValid() || this.getCachedSession() != null && this.getCachedSession().isValid();\n\t    }\n\t  }]);\n\t\n\t  return CognitoAuth;\n\t}();\n\t\n\texports.default = CognitoAuth;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Amazon Cognito Auth SDK for JavaScript\n\t * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\t\n\t * Licensed under the Apache License, Version 2.0 (the \"License\").\n\t * You may not use this file except in compliance with the License.\n\t * A copy of the License is located at\n\t *\n\t *         http://aws.amazon.com/apache2.0/\n\t *\n\t * or in the \"license\" file accompanying this file.\n\t * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n\t * OR CONDITIONS OF ANY KIND, either express or implied. See the\n\t * License for the specific language governing permissions\n\t * and limitations under the License.\n\t */\n\tvar monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\tvar weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\n\t/** @class */\n\t\n\tvar DateHelper = function () {\n\t  function DateHelper() {\n\t    _classCallCheck(this, DateHelper);\n\t  }\n\t\n\t  _createClass(DateHelper, [{\n\t    key: 'getNowString',\n\t\n\t    /**\n\t     * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n\t     */\n\t    value: function getNowString() {\n\t      var now = new Date();\n\t\n\t      var weekDay = weekNames[now.getUTCDay()];\n\t      var month = monthNames[now.getUTCMonth()];\n\t      var day = now.getUTCDate();\n\t\n\t      var hours = now.getUTCHours();\n\t      if (hours < 10) {\n\t        hours = '0' + hours;\n\t      }\n\t\n\t      var minutes = now.getUTCMinutes();\n\t      if (minutes < 10) {\n\t        minutes = '0' + minutes;\n\t      }\n\t\n\t      var seconds = now.getUTCSeconds();\n\t      if (seconds < 10) {\n\t        seconds = '0' + seconds;\n\t      }\n\t\n\t      var year = now.getUTCFullYear();\n\t\n\t      // ddd MMM D HH:mm:ss UTC YYYY\n\t      var dateNow = weekDay + ' ' + month + ' ' + day + ' ' + hours + ':' + minutes + ':' + seconds + ' UTC ' + year;\n\t\n\t      return dateNow;\n\t    }\n\t  }]);\n\t\n\t  return DateHelper;\n\t}();\n\t\n\texports.default = DateHelper;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _CognitoAccessToken = __webpack_require__(1);\n\t\n\tObject.defineProperty(exports, 'CognitoAccessToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAccessToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoIdToken = __webpack_require__(2);\n\t\n\tObject.defineProperty(exports, 'CognitoIdToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoIdToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(3);\n\t\n\tObject.defineProperty(exports, 'CognitoRefreshToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoRefreshToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoTokenScopes = __webpack_require__(4);\n\t\n\tObject.defineProperty(exports, 'CognitoTokenScopes', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoTokenScopes).default;\n\t  }\n\t});\n\t\n\tvar _CognitoAuth = __webpack_require__(7);\n\t\n\tObject.defineProperty(exports, 'CognitoAuth', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAuth).default;\n\t  }\n\t});\n\t\n\tvar _CognitoAuthSession = __webpack_require__(5);\n\t\n\tObject.defineProperty(exports, 'CognitoAuthSession', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAuthSession).default;\n\t  }\n\t});\n\t\n\tvar _DateHelper = __webpack_require__(8);\n\t\n\tObject.defineProperty(exports, 'DateHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_DateHelper).default;\n\t  }\n\t});\n\t\n\tvar _StorageHelper = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'StorageHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_StorageHelper).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// amazon-cognito-auth.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 24e0a06652a1b65884c3","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport * as enhancements from './src';\n\nexport * from './src';\n\n// The version of crypto-browserify included by aws-sdk only\n// checks for window.crypto, not window.msCrypto as used by\n// IE 11 – so we set it explicitly here\nif (typeof window !== 'undefined' && !window.crypto && window.msCrypto) {\n  window.crypto = window.msCrypto;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./enhance.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/** @class */\nexport default class CognitoAccessToken {\n  /**\n   * Constructs a new CognitoAccessToken object\n   * @param {string=} AccessToken The JWT access token.\n   */\n  constructor(AccessToken) {\n    // Assign object\n    this.jwtToken = AccessToken || '';\n    this.payload = this.decodePayload();\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * Sets new value for access token.\n   * @param {string=} accessToken The JWT access token.\n   * @returns {void}\n   */\n  setJwtToken(accessToken) {\n    this.jwtToken = accessToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    if (this.jwtToken === null) {\n      return undefined;\n    }\n    const jwtPayload = this.jwtToken.split('.')[1];\n    return JSON.parse(atob(jwtPayload)).exp;\n  }\n\n  /**\n   * @returns {string} the username from payload.\n   */\n  getUsername() {\n    if (this.jwtToken === null) {\n      return undefined;\n    }\n    const jwtPayload = this.jwtToken.split('.')[1];\n    return JSON.parse(atob(jwtPayload)).username;\n  }\n\n  /**\n   * @returns {object} the token's payload.\n   */\n  decodePayload() {\n    const jwtPayload = this.jwtToken.split('.')[1];\n    try {\n      return JSON.parse(atob(jwtPayload));\n    } catch (err) {\n      return {};\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoAccessToken.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/** @class */\nexport default class CognitoIdToken {\n  /**\n   * Constructs a new CognitoIdToken object\n   * @param {string=} IdToken The JWT Id token\n   */\n  constructor(IdToken) {\n    // Assign object\n    this.jwtToken = IdToken || '';\n    this.payload = this.decodePayload();\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * Sets new value for id token.\n   * @param {string=} idToken The JWT Id token\n   * @returns {void}\n   */\n  setJwtToken(idToken) {\n    this.jwtToken = idToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    if (this.jwtToken === null) {\n      return undefined;\n    }\n    const jwtPayload = this.jwtToken.split('.')[1];\n    return JSON.parse(atob(jwtPayload)).exp;\n  }\n\n  /**\n   * @returns {object} the token's payload.\n   */\n  decodePayload() {\n    const jwtPayload = this.jwtToken.split('.')[1];\n    try {\n      return JSON.parse(atob(jwtPayload));\n    } catch (err) {\n      return {};\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoIdToken.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/** @class */\nexport default class CognitoRefreshToken {\n  /**\n   * Constructs a new CognitoRefreshToken object\n   * @param {string=} RefreshToken The JWT refresh token.\n   */\n  constructor(RefreshToken) {\n    // Assign object\n    this.refreshToken = RefreshToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getToken() {\n    return this.refreshToken;\n  }\n\n  /**\n   * Sets new value for refresh token.\n   * @param {string=} refreshToken The JWT refresh token.\n   * @returns {void}\n   */\n  setToken(refreshToken) {\n    this.refreshToken = refreshToken;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoRefreshToken.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\n/** @class */\nexport default class CognitoTokenScopes {\n  /**\n   * Constructs a new CognitoTokenScopes object\n   * @param {array=} TokenScopesArray The token scopes\n   */\n  constructor(TokenScopesArray) {\n    // Assign object\n    this.tokenScopes = TokenScopesArray || [];\n  }\n\n  /**\n   * @returns {Array} the token scopes.\n   */\n  getScopes() {\n    return this.tokenScopes;\n  }\n\n  /**\n   * Sets new value for token scopes.\n   * @param {array=} tokenScopes The token scopes\n   * @returns {void}\n   */\n  setTokenScopes(tokenScopes) {\n    this.tokenScopes = tokenScopes;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoTokenScopes.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport CognitoTokenScopes from './CognitoTokenScopes';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\n\n/** @class */\nexport default class CognitoAuthSession {\n\t/**\n\t * Constructs a new CognitoUserSession object\n\t * @param {CognitoIdToken} IdToken The session's Id token.\n\t * @param {CognitoRefreshToken} RefreshToken The session's refresh token.\n\t * @param {CognitoAccessToken} AccessToken The session's access token.\n\t * @param {array}  TokenScopes  The session's token scopes.\n   * @param {string} State The session's state. \n\t */\n  constructor({ IdToken, RefreshToken, AccessToken, TokenScopes, State } = {}) {\n    if (IdToken) {\n      this.idToken = IdToken;\n    } else {\n      this.idToken = new CognitoIdToken();\n    }\n    if (RefreshToken) {\n      this.refreshToken = RefreshToken;\n    } else {\n      this.refreshToken = new CognitoRefreshToken();\n    }\n    if (AccessToken) {\n      this.accessToken = AccessToken;\n    } else {\n      this.accessToken = new CognitoAccessToken();\n    }\n    if (TokenScopes) {\n      this.tokenScopes = TokenScopes;\n    } else {\n      this.tokenScopes = new CognitoTokenScopes();\n    }\n    if (State) {\n      this.state = State;\n    } else {\n      this.state = null;\n    }\n  }\n\n  /**\n   * @returns {CognitoIdToken} the session's Id token\n   */\n  getIdToken() {\n    return this.idToken;\n  }\n\n  /**\n   * Set a new Id token\n   * @param {CognitoIdToken} IdToken The session's Id token.\n   * @returns {void}\n   */\n  setIdToken(IdToken) {\n    this.idToken = IdToken;\n  }\n\n  /**\n   * @returns {CognitoRefreshToken} the session's refresh token\n   */\n  getRefreshToken() {\n    return this.refreshToken;\n  }\n\n  /**\n   * Set a new Refresh token\n   * @param {CognitoRefreshToken} RefreshToken The session's refresh token.\n   * @returns {void}\n   */\n  setRefreshToken(RefreshToken) {\n    this.refreshToken = RefreshToken;\n  }\n\n  /**\n   * @returns {CognitoAccessToken} the session's access token\n   */\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  /**\n   * Set a new Access token\n   * @param {CognitoAccessToken} AccessToken The session's access token.\n   * @returns {void}\n   */\n  setAccessToken(AccessToken) {\n    this.accessToken = AccessToken;\n  }\n\n  /**\n   * @returns {CognitoTokenScopes} the session's token scopes\n   */\n  getTokenScopes() {\n    return this.tokenScopes;\n  }\n\n  /**\n   * Set new token scopes\n   * @param {array}  tokenScopes  The session's token scopes.\n   * @returns {void}\n   */\n  setTokenScopes(tokenScopes) {\n    this.tokenScopes = tokenScopes;\n  }\n\n  /**\n   * @returns {string} the session's state\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Set new state\n   * @param {string}  state  The session's state.\n   * @returns {void}\n   */\n  setState(State) {\n    this.state = State;\n  }\n\n  /**\n   * Checks to see if the session is still valid based on session expiry information found\n   * in Access and Id Tokens and the current time\n   * @returns {boolean} if the session is still valid\n   */\n  isValid() {\n    const now = Math.floor(new Date() / 1000);\n    try {\n      if (this.accessToken != null) {\n        return now < this.accessToken.getExpiration();\n      }\n      if (this.idToken != null) {\n        return now < this.idToken.getExpiration();\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoAuthSession.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\nlet dataMemory = {};\n\n/** @class */\nclass MemoryStorage {\n\n  /**\n   * This is used to set a specific item in storage\n   * @param {string} key - the key for the item\n   * @param {object} value - the value\n   * @returns {string} value that was set\n   */\n  static setItem(key, value) {\n    dataMemory[key] = value;\n    return dataMemory[key];\n  }\n\n  /**\n   * This is used to get a specific key from storage\n   * @param {string} key - the key for the item\n   * This is used to clear the storage\n   * @returns {string} the data item\n   */\n  static getItem(key) {\n    return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n  }\n\n  /**\n   * This is used to remove an item from storage\n   * @param {string} key - the key being set\n   * @returns {string} value - value that was deleted\n   */\n  static removeItem(key) {\n    return delete dataMemory[key];\n  }\n\n  /**\n   * This is used to clear the storage\n   * @returns {string} nothing\n   */\n  static clear() {\n    dataMemory = {};\n    return dataMemory;\n  }\n}\n\n/** @class */\nexport default class StorageHelper {\n\n  /**\n   * This is used to get a storage object\n   * @returns {object} the storage\n   */\n  constructor() {\n    try {\n      this.storageWindow = window.localStorage;\n      this.storageWindow.setItem('aws.cognito.test-ls', 1);\n      this.storageWindow.removeItem('aws.cognito.test-ls');\n    } catch (exception) {\n      this.storageWindow = MemoryStorage;\n    }\n  }\n\n  /**\n   * This is used to return the storage\n   * @returns {object} the storage\n   */\n  getStorage() {\n    return this.storageWindow;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/StorageHelper.js","/*!\n  * Amazon Cognito Auth SDK for JavaScript\n  * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\").\n  * You may not use this file except in compliance with the License.\n  * A copy of the License is located at\n  *\n  *         http://aws.amazon.com/apache2.0/\n  *\n  * or in the \"license\" file accompanying this file.\n  * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n  * OR CONDITIONS OF ANY KIND, either express or implied. See the\n  * License for the specific language governing permissions\n  * and limitations under the License.\n  */\n\n  import CognitoTokenScopes from './CognitoTokenScopes';\n  import CognitoAccessToken from './CognitoAccessToken';\n  import CognitoIdToken from './CognitoIdToken';\n  import CognitoRefreshToken from './CognitoRefreshToken';\n  import CognitoAuthSession from './CognitoAuthSession';\n  import StorageHelper from './StorageHelper';\n  \n  /** @class */\n  export default class CognitoAuth {\n    /**\n     * Constructs a new CognitoAuth object\n     * @param {object} data Creation options\n     * @param {string} data.ClientId Required: User pool application client id.\n     * @param {string} data.AppWebDomain Required: The application/user-pools Cognito web hostname,\n     *                     this is set at the Cognito console.\n     * @param {array} data.TokenScopesArray Optional: The token scopes\n     * @param {string} data.RedirectUriSignIn Required: The redirect Uri,\n     * which will be launched after authentication as signed in.\n     * @param {string} data.RedirectUriSignOut Required:\n     * The redirect Uri, which will be launched when signed out.\n     * @param {string} data.IdentityProvider Optional: Pre-selected identity provider (this allows to\n     * automatically trigger social provider authentication flow).\n     * @param {string} data.UserPoolId Optional: UserPoolId for the configured cognito userPool.\n     * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional: boolean flag indicating if the\n     *        data collection is enabled to support cognito advanced security features. By default, this\n     *        flag is set to true.\n     * @param {nodeCallback<CognitoAuthSession>} Optional: userhandler Called on success or error.\n     */\n    constructor(data) {\n      const { ClientId, AppWebDomain, TokenScopesArray,\n      RedirectUriSignIn, RedirectUriSignOut, IdentityProvider, UserPoolId,\n      AdvancedSecurityDataCollectionFlag, Storage } = data || { };\n      if (data == null || !ClientId || !AppWebDomain || !RedirectUriSignIn || !RedirectUriSignOut) {\n        throw new Error(this.getCognitoConstants().PARAMETERERROR);\n      }\n  \n      this.clientId = ClientId;\n      this.appWebDomain = AppWebDomain;\n      this.TokenScopesArray = TokenScopesArray || [];\n      if (!Array.isArray(TokenScopesArray)) {\n        throw new Error(this.getCognitoConstants().SCOPETYPEERROR);\n      }\n      const tokenScopes = new CognitoTokenScopes(this.TokenScopesArray);\n      this.RedirectUriSignIn = RedirectUriSignIn;\n      this.RedirectUriSignOut = RedirectUriSignOut;\n      this.IdentityProvider = IdentityProvider;\n      this.responseType = this.getCognitoConstants().TOKEN;\n      this.storage = Storage || new StorageHelper().getStorage();\n      this.username = this.getLastUser();\n      this.userPoolId = UserPoolId;\n      this.signInUserSession = this.getCachedSession();\n+     this.signInUserSession.setTokenScopes(tokenScopes);\n  \n      /**\n       * By default, AdvancedSecurityDataCollectionFlag is set to true, if no input value is provided.\n       */\n      this.advancedSecurityDataCollectionFlag = true;\n      if (AdvancedSecurityDataCollectionFlag) {\n        this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag;\n      }\n    }\n  \n    /**\n     * @returns {JSON} the constants\n     */\n    getCognitoConstants() {\n      const CognitoConstants = {\n        DOMAIN_SCHEME: 'https',\n        DOMAIN_PATH_SIGNIN: 'oauth2/authorize',\n        DOMAIN_PATH_TOKEN: 'oauth2/token',\n        DOMAIN_PATH_SIGNOUT: 'logout',\n        DOMAIN_QUERY_PARAM_REDIRECT_URI: 'redirect_uri',\n        DOMAIN_QUERY_PARAM_SIGNOUT_URI: 'logout_uri',\n        DOMAIN_QUERY_PARAM_RESPONSE_TYPE: 'response_type',\n        DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER: 'identity_provider',\n        DOMAIN_QUERY_PARAM_USERCONTEXTDATA: 'userContextData',\n        CLIENT_ID: 'client_id',\n        STATE: 'state',\n        SCOPE: 'scope',\n        TOKEN: 'token',\n        CODE: 'code',\n        POST: 'POST',\n        PARAMETERERROR: 'The parameters: App client Id, App web domain' +\n                        ', the redirect URL when you are signed in and the ' +\n                        'redirect URL when you are signed out are required.',\n        SCOPETYPEERROR: 'Scopes have to be array type. ',\n        QUESTIONMARK: '?',\n        POUNDSIGN: '#',\n        COLONDOUBLESLASH: '://',\n        SLASH: '/',\n        AMPERSAND: '&',\n        EQUALSIGN: '=',\n        SPACE: ' ',\n        CONTENTTYPE: 'Content-Type',\n        CONTENTTYPEVALUE: 'application/x-www-form-urlencoded',\n        AUTHORIZATIONCODE: 'authorization_code',\n        IDTOKEN: 'id_token',\n        ACCESSTOKEN: 'access_token',\n        REFRESHTOKEN: 'refresh_token',\n        ERROR: 'error',\n        ERROR_DESCRIPTION: 'error_description',\n        STRINGTYPE: 'string',\n        STATELENGTH: 32,\n        STATEORIGINSTRING: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n        WITHCREDENTIALS: 'withCredentials',\n        UNDEFINED: 'undefined',\n        SELF: '_self',\n        HOSTNAMEREGEX: /:\\/\\/([0-9]?\\.)?(.[^/:]+)/i,\n        QUERYPARAMETERREGEX1: /#(.+)/,\n        QUERYPARAMETERREGEX2: /=(.+)/,\n        HEADER: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      };\n      return CognitoConstants;\n    }\n  \n    /**\n     * @returns {string} the client id\n     */\n    getClientId() {\n      return this.clientId;\n    }\n  \n    /**\n     * @returns {string} the app web domain\n     */\n    getAppWebDomain() {\n      return this.appWebDomain;\n    }\n  \n    /**\n     * method for getting the current user of the application from the local storage\n     *\n     * @returns {CognitoAuth} the user retrieved from storage\n     */    \n     getCurrentUser() {\n      const lastUserKey = `CognitoIdentityServiceProvider.${this.clientId}.LastAuthUser`;\n  \n      const lastAuthUser = this.storage.getItem(lastUserKey);\n      return lastAuthUser;    \n    }\n  \n    /**\n     * @param {string} Username the user's name\n     * method for setting the current user's name\n     * @returns {void}\n     */\n    setUser(Username) {\n      this.username = Username;\n    }\n  \n    /**\n     * sets response type to 'code'\n     * @returns {void}\n     */\n    useCodeGrantFlow() {\n      this.responseType = this.getCognitoConstants().CODE;\n    }\n  \n    /**\n     * sets response type to 'token'\n     * @returns {void}\n     */\n    useImplicitFlow() {\n      this.responseType = this.getCognitoConstants().TOKEN;\n    }\n  \n    /**\n     * @returns {CognitoAuthSession} the current session for this user\n     */\n    getSignInUserSession() {\n      return this.signInUserSession;\n    }\n  \n    /**\n     * @returns {string} the user's username\n     */\n    getUsername() {\n      return this.username;\n    }\n  \n    /**\n     * @param {string} Username the user's username\n     * @returns {void}\n     */\n    setUsername(Username) {\n      this.username = Username;\n    }\n\n    /**\n     * @returns {string} the user's state\n     */\n    getState() {\n      return this.state;\n    }\n\n    /**\n     * @param {string} State the user's state\n     * @returns {void}\n     */\n    setState(State) {\n      this.state = State;\n    }\n  \n    /**\n     * This is used to get a session, either from the session object\n     * or from the local storage, or by using a refresh token\n     * @param {string} RedirectUriSignIn Required: The redirect Uri,\n     * which will be launched after authentication.\n     * @param {array} TokenScopesArray Required: The token scopes, it is an\n     * array of strings specifying all scopes for the tokens.\n     * @returns {void}\n     */\n    getSession() {\n      const tokenScopesInputSet = new Set(this.TokenScopesArray);\n      const cachedScopesSet = new Set(this.signInUserSession.tokenScopes.getScopes());\n      const URL = this.getFQDNSignIn();\n      if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n        return this.userhandler.onSuccess(this.signInUserSession);\n      }\n      this.signInUserSession = this.getCachedSession();\n      // compare scopes\n      if (!this.compareSets(tokenScopesInputSet, cachedScopesSet)) {\n        const tokenScopes = new CognitoTokenScopes(this.TokenScopesArray);\n        const idToken = new CognitoIdToken();\n        const accessToken = new CognitoAccessToken();\n        const refreshToken = new CognitoRefreshToken();\n        this.signInUserSession.setTokenScopes(tokenScopes);\n        this.signInUserSession.setIdToken(idToken);\n        this.signInUserSession.setAccessToken(accessToken);\n        this.signInUserSession.setRefreshToken(refreshToken);\n        this.launchUri(URL);\n      } else if (this.signInUserSession.isValid()) {\n        return this.userhandler.onSuccess(this.signInUserSession);\n      } else if (!this.signInUserSession.getRefreshToken()\n      || !this.signInUserSession.getRefreshToken().getToken()) {\n        this.launchUri(URL);\n      } else {\n        this.refreshSession(this.signInUserSession.getRefreshToken().getToken());\n      }\n      return undefined;\n    }\n  \n    /**\n     * @param {string} httpRequestResponse the http request response\n     * @returns {void}\n     * Parse the http request response and proceed according to different response types.\n     */\n    parseCognitoWebResponse(httpRequestResponse) {\n      let map;\n      if (httpRequestResponse.indexOf(this.getCognitoConstants().QUESTIONMARK) > -1) { // for code type\n        // this is to avoid a bug exists when sign in with Google or facebook\n        // Sometimes the code will contain a poundsign in the end which breaks the parsing\n        const response = (httpRequestResponse.split(this.getCognitoConstants().POUNDSIGN))[0];\n        map = this.getQueryParameters(\n          response,\n          this.getCognitoConstants().QUESTIONMARK\n        );\n        this.getCodeQueryParameter(map);\n      } else if (httpRequestResponse.indexOf(this.getCognitoConstants().POUNDSIGN) > -1) { // for token type\n        map = this.getQueryParameters(\n          httpRequestResponse,\n          this.getCognitoConstants().QUERYPARAMETERREGEX1\n        );\n        if (map.has(this.getCognitoConstants().ERROR)) {\n          return this.userhandler.onFailure(map.get(this.getCognitoConstants().ERROR_DESCRIPTION));\n        }\n        // To use the map to get tokens\n        this.getTokenQueryParameter(map);\n      }\n    }\n  \n    /**\n     * @param {map} Query parameter map \n     * @returns {void}\n     * Get the query parameter map and proceed according to code response type.\n     */\n    getCodeQueryParameter(map) {\n      const state = null;\n      if (map.has(this.getCognitoConstants().STATE)) {\n        this.signInUserSession.setState(map.get(this.getCognitoConstants().STATE));\n      } else {\n        this.signInUserSession.setState(state);\n      }\n\n      if (map.has(this.getCognitoConstants().CODE)) {\n        // if the response contains code\n        // To parse the response and get the code value.\n        const codeParameter = map.get(this.getCognitoConstants().CODE);\n        const url = this.getCognitoConstants().DOMAIN_SCHEME.concat(\n        this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(),\n        this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_TOKEN);\n        const header = this.getCognitoConstants().HEADER;\n        const body = { grant_type: this.getCognitoConstants().AUTHORIZATIONCODE,\n          client_id: this.getClientId(),\n          redirect_uri: this.RedirectUriSignIn,\n          code: codeParameter };\n        const boundOnSuccess = (this.onSuccessExchangeForToken).bind(this);\n        const boundOnFailure = (this.onFailure).bind(this);\n        this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n      }\n    }\n  \n    /**\n     * Get the query parameter map and proceed according to token response type.\n     * @param {map} Query parameter map \n     * @returns {void}\n     */\n    getTokenQueryParameter(map) {\n      const idToken = new CognitoIdToken();\n      const accessToken = new CognitoAccessToken();\n      const refreshToken = new CognitoRefreshToken();\n      const state = null;\n      if (map.has(this.getCognitoConstants().IDTOKEN)) {\n        idToken.setJwtToken(map.get(this.getCognitoConstants().IDTOKEN));\n        this.signInUserSession.setIdToken(idToken);\n      } else {\n        this.signInUserSession.setIdToken(idToken);\n      }\n      if (map.has(this.getCognitoConstants().ACCESSTOKEN)) {\n        accessToken.setJwtToken(map.get(this.getCognitoConstants().ACCESSTOKEN));\n        this.signInUserSession.setAccessToken(accessToken);\n      } else {\n        this.signInUserSession.setAccessToken(accessToken);\n      }\n      if (map.has(this.getCognitoConstants().STATE)) {\n        this.signInUserSession.setState(map.get(this.getCognitoConstants().STATE));\n      } else {\n        this.signInUserSession.setState(state);\n      }\n      this.cacheTokensScopes();\n      this.userhandler.onSuccess(this.signInUserSession); \n    }\n  \n    /**\n     * Get cached tokens and scopes and return a new session using all the cached data.\n     * @returns {CognitoAuthSession} the auth session\n     */\n    getCachedSession() {\n      if (!this.username) {\n        return new CognitoAuthSession();\n      }\n      const keyPrefix = `CognitoIdentityServiceProvider.${this.getClientId()}.${this.username}`;\n      const idTokenKey = `${keyPrefix}.idToken`;\n      const accessTokenKey = `${keyPrefix}.accessToken`;\n      const refreshTokenKey = `${keyPrefix}.refreshToken`;\n      const scopeKey = `${keyPrefix}.tokenScopesString`;\n  \n      const scopesString = this.storage.getItem(scopeKey);\n      let scopesArray = [];\n      if (scopesString) {\n        scopesArray = scopesString.split(' ');\n      }\n      const tokenScopes = new CognitoTokenScopes(scopesArray);\n      const idToken = new CognitoIdToken(this.storage.getItem(idTokenKey));\n      const accessToken = new CognitoAccessToken(this.storage.getItem(accessTokenKey));\n      const refreshToken = new CognitoRefreshToken(this.storage.getItem(refreshTokenKey));\n  \n      const sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        TokenScopes: tokenScopes,\n      };\n      const cachedSession = new CognitoAuthSession(sessionData);\n      return cachedSession;\n    }\n  \n    /**\n     * This is used to get last signed in user from local storage\n     * @returns {string} the last user name\n     */\n    getLastUser() {\n      const keyPrefix = `CognitoIdentityServiceProvider.${this.getClientId()}`;\n      const lastUserKey = `${keyPrefix}.LastAuthUser`;\n      const lastUserName = this.storage.getItem(lastUserKey);\n      if (lastUserName) {\n        return lastUserName;\n      }\n      return undefined;\n    }\n  \n    /**\n     * This is used to save the session tokens and scopes to local storage\n     * Input parameter is a set of strings.\n     * @returns {void}\n     */\n    cacheTokensScopes() {\n      const keyPrefix = `CognitoIdentityServiceProvider.${this.getClientId()}`;\n      const tokenUserName = this.signInUserSession.getAccessToken().getUsername();\n      this.username = tokenUserName;\n      const idTokenKey = `${keyPrefix}.${tokenUserName}.idToken`;\n      const accessTokenKey = `${keyPrefix}.${tokenUserName}.accessToken`;\n      const refreshTokenKey = `${keyPrefix}.${tokenUserName}.refreshToken`;\n      const lastUserKey = `${keyPrefix}.LastAuthUser`;\n      const scopeKey = `${keyPrefix}.${tokenUserName}.tokenScopesString`;\n      const scopesArray = this.signInUserSession.getTokenScopes().getScopes();\n      const scopesString = scopesArray.join(' ');\n      this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n      this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n      this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n      this.storage.setItem(lastUserKey, tokenUserName);\n      this.storage.setItem(scopeKey, scopesString);\n    }\n  \n    /**\n     * Compare two sets if they are identical.\n     * @param {set} set1 one set\n     * @param {set} set2 the other set\n     * @returns {boolean} boolean value is true if two sets are identical\n     */\n    compareSets(set1, set2) {\n      if (set1.size !== set2.size) {\n        return false;\n      }\n      for (const item of set1) {\n        if (!set2.has(item)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  \n    /**\n     * @param {string} url the url string\n     * Get the hostname from url.\n     * @returns {string} hostname string\n     */\n    getHostName(url) {\n      const match = url.match(this.getCognitoConstants().HOSTNAMEREGEX);\n      if (match != null && match.length > 2 && typeof match[2] ===\n      this.getCognitoConstants().STRINGTYPE && match[2].length > 0) {\n        return match[2];\n      }\n      return undefined;\n    }\n  \n    /**\n     * Get http query parameters and return them as a map.\n     * @param {string} url the url string\n     * @param {string} splitMark query parameters split mark (prefix)\n     * @returns {map} map\n     */\n    getQueryParameters(url, splitMark) {\n      const str = String(url).split(splitMark);\n      const url2 = str[1];\n      const str1 = String(url2).split(this.getCognitoConstants().AMPERSAND);\n      const num = str1.length;\n      const map = new Map();\n      let i;\n      for (i = 0; i < num; i++) {\n        str1[i] = String(str1[i]).split(this.getCognitoConstants().QUERYPARAMETERREGEX2);\n        map.set(str1[i][0], str1[i][1]);\n      }\n      return map;\n    }\n  \n    /**\n     * helper function to generate a random string\n     * @param {int} length the length of string\n     * @param {string} chars a original string\n     * @returns {string} a random value.\n     */\n    generateRandomString(length, chars) {\n      let result = '';\n      let i = length;\n      for (; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];\n      return result;\n    }\n  \n    /**\n     * This is used to clear the session tokens and scopes from local storage\n     * @returns {void}\n     */\n    clearCachedTokensScopes() {\n      const keyPrefix = `CognitoIdentityServiceProvider.${this.getClientId()}`;\n      const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\n      const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\n      const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\n      const lastUserKey = `${keyPrefix}.LastAuthUser`;\n      const scopeKey = `${keyPrefix}.${this.username}.tokenScopesString`;\n  \n      this.storage.removeItem(idTokenKey);\n      this.storage.removeItem(accessTokenKey);\n      this.storage.removeItem(refreshTokenKey);\n      this.storage.removeItem(lastUserKey);\n      this.storage.removeItem(scopeKey);\n    }\n  \n    /**\n     * This is used to build a user session from tokens retrieved in the authentication result\n     * @param {object} refreshToken authResult Successful auth response from server.\n     * @returns {void}\n     */\n    refreshSession(refreshToken) {\n      // https POST call for refreshing token\n      const url = this.getCognitoConstants().DOMAIN_SCHEME.concat(\n      this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(),\n      this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_TOKEN);\n      const header = this.getCognitoConstants().HEADER;\n      const body = { grant_type: this.getCognitoConstants().REFRESHTOKEN,\n        client_id: this.getClientId(),\n        redirect_uri: this.RedirectUriSignIn,\n        refresh_token: refreshToken };\n      const boundOnSuccess = (this.onSuccessRefreshToken).bind(this);\n      const boundOnFailure = (this.onFailure).bind(this);\n      this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n    }\n  \n    /**\n     * Make the http POST request.\n     * @param {JSON} header header JSON object\n     * @param {JSON} body body JSON object\n     * @param {string} url string\n     * @param {function} onSuccess callback\n     * @param {function} onFailure callback\n     * @returns {void}\n     */\n    makePOSTRequest(header, body, url, onSuccess, onFailure) {\n      // This is a sample server that supports CORS.\n      const xhr = this.createCORSRequest(this.getCognitoConstants().POST, url);\n      let bodyString = '';\n      if (!xhr) {\n        return;\n      }\n      // set header\n      for (let key in header) {\n        xhr.setRequestHeader(key, header[key]);\n      }\n      for (let key in body) {\n        bodyString = bodyString.concat(key, this.getCognitoConstants().EQUALSIGN,\n        body[key], this.getCognitoConstants().AMPERSAND);\n      }\n      bodyString = bodyString.substring(0, bodyString.length - 1);\n      xhr.send(bodyString);\n      xhr.onreadystatechange = function addressState() {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            onSuccess(xhr.responseText);\n          } else {\n            onFailure(xhr.responseText);\n          }\n        }\n      };\n    }\n  \n    /**\n     * Create the XHR object\n     * @param {string} method which method to call\n     * @param {string} url the url string\n     * @returns {object} xhr\n     */\n    createCORSRequest(method, url) {\n      let xhr = new XMLHttpRequest();\n      xhr.open(method, url, true);\n      if (this.getCognitoConstants().WITHCREDENTIALS in xhr) {\n        // XHR for Chrome/Firefox/Opera/Safari.\n        xhr.open(method, url, true);\n      } else if (typeof XDomainRequest !== this.getCognitoConstants().UNDEFINED) {\n        // XDomainRequest for IE.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n      } else {\n        // CORS not supported.\n        xhr = null;\n      }\n      return xhr;\n    }\n  \n    /**\n     * The http POST request onFailure callback.\n     * @param {object} err the error object\n     * @returns {function} onFailure\n     */\n    onFailure(err) {\n      this.userhandler.onFailure(err);\n    }\n  \n    /**\n     * The http POST request onSuccess callback when refreshing tokens.\n     * @param {JSON} jsonData tokens\n     */\n    onSuccessRefreshToken(jsonData) {\n      const jsonDataObject = JSON.parse(jsonData);\n      if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n      this.getCognitoConstants().ERROR)) {\n        const URL = this.getFQDNSignIn();\n        this.launchUri(URL);\n      } else {\n        if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n        this.getCognitoConstants().IDTOKEN)) {\n          this.signInUserSession.setIdToken(new\n          CognitoIdToken(jsonDataObject.id_token));\n        }\n        if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n        this.getCognitoConstants().ACCESSTOKEN)) {\n          this.signInUserSession.setAccessToken(new\n          CognitoAccessToken(jsonDataObject.access_token));\n        }\n        this.cacheTokensScopes();\n        this.userhandler.onSuccess(this.signInUserSession);\n      }\n    }\n  \n    /**\n     * The http POST request onSuccess callback when exchanging code for tokens.\n     * @param {JSON} jsonData tokens\n     */\n    onSuccessExchangeForToken(jsonData) {\n      const jsonDataObject = JSON.parse(jsonData);\n      const refreshToken = new CognitoRefreshToken();\n      const accessToken = new CognitoAccessToken();\n      const idToken = new CognitoIdToken();\n      const state = null;\n      if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n      this.getCognitoConstants().ERROR)) {\n        return this.userhandler.onFailure(jsonData);\n      }\n      if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n      this.getCognitoConstants().IDTOKEN)) {\n        this.signInUserSession.setIdToken(\n        new CognitoIdToken(jsonDataObject.id_token));\n      } else {\n        this.signInUserSession.setIdToken(idToken);\n      }\n      if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n      this.getCognitoConstants().ACCESSTOKEN)) {\n        this.signInUserSession.setAccessToken(new\n        CognitoAccessToken(jsonDataObject.access_token));\n      } else {\n        this.signInUserSession.setAccessToken(accessToken);\n      }\n      if (Object.prototype.hasOwnProperty.call(jsonDataObject,\n      this.getCognitoConstants().REFRESHTOKEN)) {\n        this.signInUserSession.setRefreshToken(new\n        CognitoRefreshToken(jsonDataObject.refresh_token));\n      } else {\n        this.signInUserSession.setRefreshToken(refreshToken);\n      }\n      this.cacheTokensScopes();\n      this.userhandler.onSuccess(this.signInUserSession);\n    }\n  \n    /**\n     * Launch Cognito Auth UI page.\n     * @param {string} URL the url to launch\n     * @returns {void}\n     */\n    launchUri(URL) {\n      window.open(URL, this.getCognitoConstants().SELF);\n    }\n  \n    /**\n     * @returns {string} scopes string\n     */\n    getSpaceSeperatedScopeString() {\n      let tokenScopesString = this.signInUserSession.getTokenScopes().getScopes();\n      tokenScopesString = tokenScopesString.join(this.getCognitoConstants().SPACE);\n      return encodeURIComponent(tokenScopesString);\n    }\n  \n    /**\n     * Create the FQDN(fully qualified domain name) for authorization endpoint.\n     * @returns {string} url\n     */\n    getFQDNSignIn() {\n      if (this.state == null) {\n        this.state = this.generateRandomString(this.getCognitoConstants().STATELENGTH,\n      this.getCognitoConstants().STATEORIGINSTRING);\n      }\n  \n      const identityProviderParam = this.IdentityProvider\n          ? this.getCognitoConstants().AMPERSAND.concat(\n              this.getCognitoConstants().DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER,\n              this.getCognitoConstants().EQUALSIGN, this.IdentityProvider)\n          : '';\n      const tokenScopesString = this.getSpaceSeperatedScopeString();\n  \n      var userContextDataParam = '';\n      var userContextData = this.getUserContextData();\n      if (userContextData) {\n        userContextDataParam = this.getCognitoConstants().AMPERSAND + this.getCognitoConstants().DOMAIN_QUERY_PARAM_USERCONTEXTDATA +\n                               this.getCognitoConstants().EQUALSIGN + this.getUserContextData();\n      }\n  \n      // Build the complete web domain to launch the login screen\n      const uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(\n      this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(),\n      this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNIN,\n      this.getCognitoConstants().QUESTIONMARK,\n      this.getCognitoConstants().DOMAIN_QUERY_PARAM_REDIRECT_URI,\n      this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignIn),\n      this.getCognitoConstants().AMPERSAND,\n      this.getCognitoConstants().DOMAIN_QUERY_PARAM_RESPONSE_TYPE,\n      this.getCognitoConstants().EQUALSIGN,\n      this.responseType, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID,\n      this.getCognitoConstants().EQUALSIGN, this.getClientId(),\n      this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().STATE,\n      this.getCognitoConstants().EQUALSIGN, this.state, this.getCognitoConstants().AMPERSAND,\n      this.getCognitoConstants().SCOPE, this.getCognitoConstants().EQUALSIGN, tokenScopesString, identityProviderParam,\n      userContextDataParam);\n  \n      return uri;\n    }\n  \n    /**\n     * Sign out the user.\n     * @returns {void}\n     */\n    signOut() {\n      const URL = this.getFQDNSignOut();\n      this.signInUserSession = null;\n      this.clearCachedTokensScopes();\n      this.launchUri(URL);\n    }\n  \n    /**\n     * Create the FQDN(fully qualified domain name) for signout endpoint.\n     * @returns {string} url\n     */\n    getFQDNSignOut() {\n      const uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(\n      this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(),\n      this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNOUT,\n      this.getCognitoConstants().QUESTIONMARK,\n      this.getCognitoConstants().DOMAIN_QUERY_PARAM_SIGNOUT_URI,\n      this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignOut),\n      this.getCognitoConstants().AMPERSAND,\n      this.getCognitoConstants().CLIENT_ID,\n      this.getCognitoConstants().EQUALSIGN, this.getClientId());\n      return uri;\n    }\n  \n    /**\n     * This method returns the encoded data string used for cognito advanced security feature.\n     * This would be generated only when developer has included the JS used for collecting the\n     * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n     * features\n     **/\n    getUserContextData() {\n      if (typeof AmazonCognitoAdvancedSecurityData === \"undefined\") {\n        return;\n      }\n  \n      var _username = \"\";\n      if (this.username){\n        _username = this.username;\n      }\n  \n      var _userpoolId = \"\";\n      if (this.userpoolId){\n        _userpoolId = this.userpoolId;\n      }\n  \n      if (this.advancedSecurityDataCollectionFlag) {\n        return AmazonCognitoAdvancedSecurityData.getData(_username, _userpoolId, this.clientId);\n      }\n    }\n\n    /**\n     * Helper method to let the user know if he has either a valid cached session \n     * or a valid authenticated session from the app integration callback.\n     * @returns {boolean} userSignedIn \n     */\n    isUserSignedIn() {\n     return (this.signInUserSession != null && this.signInUserSession.isValid()) || \n     (this.getCachedSession() != null && this.getCachedSession().isValid());\n    }\n  }\n\n\n// WEBPACK FOOTER //\n// ./src/CognitoAuth.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\nconst monthNames =\n  ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n/** @class */\nexport default class DateHelper {\n  /**\n   * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n   */\n  getNowString() {\n    const now = new Date();\n\n    const weekDay = weekNames[now.getUTCDay()];\n    const month = monthNames[now.getUTCMonth()];\n    const day = now.getUTCDate();\n\n    let hours = now.getUTCHours();\n    if (hours < 10) {\n      hours = `0${hours}`;\n    }\n\n    let minutes = now.getUTCMinutes();\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n\n    let seconds = now.getUTCSeconds();\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n\n    const year = now.getUTCFullYear();\n\n    // ddd MMM D HH:mm:ss UTC YYYY\n    const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;\n\n    return dateNow;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/DateHelper.js","/*!\n * Amazon Cognito Auth SDK for JavaScript\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *         http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file.\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions\n * and limitations under the License.\n */\n\nexport { default as CognitoAccessToken } from './CognitoAccessToken';\nexport { default as CognitoIdToken } from './CognitoIdToken';\nexport { default as CognitoRefreshToken } from './CognitoRefreshToken';\nexport { default as CognitoTokenScopes } from './CognitoTokenScopes';\nexport { default as CognitoAuth } from './CognitoAuth';\nexport { default as CognitoAuthSession } from './CognitoAuthSession';\nexport { default as DateHelper } from './DateHelper';\nexport { default as StorageHelper } from './StorageHelper';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}